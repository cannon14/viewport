package unit

import (
	"test/app/models"
	"test/app/utils"
	"testing"
	"time"
)

func TestIsExemptNoVulsWithoutDate(t *testing.T) {

	app := models.Application{}
	vuls := map[string]uint8{"critical": 0, "high": 0}

	result := utils.IsExempt(app, vuls)

	if !result {
		t.Errorf("Result = %t; Wanted true", result)
	}
}

func TestIsExemptWithVulsAndWithDate(t *testing.T) {

	exemptTo := time.Now().AddDate(0, 1, 0)
	approvedBy := uint16(1)
	app := models.Application{
		ExemptTo:   &exemptTo,
		ApprovedBy: &approvedBy,
	}

	vuls := map[string]uint8{"critical": 1, "high": 1}

	result := utils.IsExempt(app, vuls)

	if !result {
		t.Errorf("Result = %t; Wanted true", result)
	}
}

func TestIsExemptWithVulsAndWithDateNotApproved(t *testing.T) {

	exemptTo := time.Now().AddDate(0, 1, 0)
	app := models.Application{
		ExemptTo: &exemptTo,
	}

	vuls := map[string]uint8{"critical": 1, "high": 1}

	result := utils.IsExempt(app, vuls)

	if result {
		t.Errorf("Result = %t; Wanted false", result)
	}
}

func TestIsExemptWithVulsAndWithoutDate(t *testing.T) {

	app := models.Application{}

	vuls := map[string]uint8{"critical": 1, "high": 1}

	result := utils.IsExempt(app, vuls)

	if result {
		t.Errorf("Result = %t; Wanted false", result)
	}
}
