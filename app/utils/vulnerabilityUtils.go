package utils

import (
	"errors"
	"github.com/sirupsen/logrus"
	"strconv"
	"strings"
	"test/app/models"
	"time"
)

func ExtractVulnerabilityCounts(vulnerabilities string) (map[string]uint8, error) {

	vuls := make(map[string]uint8)

	if !strings.Contains(vulnerabilities, "CRITICAL") && !strings.Contains(vulnerabilities, "HIGH") {
		logrus.Error(vulnerabilities)
		return vuls, errors.New("bad vulnerability string input")
	}
	//  Expected String: Vulnerabilities: CRITICAL: 0, HIGH: 0, MEDIUM: 0, LOW: 0, INFORMATIONAL: 0
	vulnerabilities = strings.Replace(vulnerabilities, "Vulnerabilities: ", "", 1)
	data := strings.Split(vulnerabilities, ",")

	//Data should look like this at this point
	//data[0] = CRITICAL: 0
	//data[1] = HIGH: 0
	//data[2] = MEDIUM: 0
	//data[3] = LOW: 0
	//data[4] = INFORMATIONAL: 0

	//Get first element, split it on colon
	//get the integer at the 2nd index and trim the spaces out
	critical := strings.TrimSpace(strings.Split(data[0], ":")[1])

	//Get second element, split it on colon
	//get the integer at the 2nd index and trim the spaces out
	high := strings.TrimSpace(strings.Split(data[1], ":")[1])

	critInt, err := strconv.Atoi(critical)
	if err != nil {
		logrus.Error(err)
		return vuls, err
	}
	highInt, err := strconv.Atoi(high)
	if err != nil {
		logrus.Error(err)
		return vuls, err
	}

	vuls["critical"] = uint8(critInt)
	vuls["high"] = uint8(highInt)

	return vuls, nil
}

func IsExempt(a models.Application, v map[string]uint8) bool {
	
	today := time.Now()

	exemptionExpired := false
	if a.ExemptTo != nil {
		exemptionExpired = today.After(*a.ExemptTo)
	}

	crit, critExists := v["critical"]
	high, highExists := v["high"]

	hasVulnerabilities := false

	//If the incoming map has critical and high keys we evaluate those, if not, we evaluate the ones in the application from db
	if critExists && highExists {
		hasVulnerabilities = crit > 0 || high > 0
	} else {
		hasVulnerabilities = a.Critical > 0 || a.High > 0
	}

	return !hasVulnerabilities || (hasVulnerabilities && !exemptionExpired && a.ApprovedBy != nil)
}
