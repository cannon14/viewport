package services

import (
	"fmt"
	"test/app/models"
)

func UpdateAppVulnerabilityCount() {

	wizProjects, _ := GetAllWizProjects(0, 1000)

	var subscriptionMaps = make(map[string]map[string]models.WizApplication)
	for _, wp := range wizProjects {

		wizSubscriptions := GetWizSubscriptionByProjectId(wp.Id)

		for _, ws := range wizSubscriptions {
			wizApplications := GetWizApplicationsBySubscriptionId(ws.Id)

			applicationMaps := make(map[string]models.WizApplication)
			for _, wa := range wizApplications {
				applicationMaps[wa.Name] = wa
			}
			subscriptionMaps[ws.SubscriptionId] = applicationMaps
		}

		for subId, app := range subscriptionMaps {

			vuls := getWizVulnerabilities(wp.ProjectId, subId)
			entities := vuls.IssuesGroupedByEntity.EntityNodes

			for _, is := range entities {
				val, ok := app[is.EntityBasicDetails.Name]

				if ok {
					val.Critical = is.Issues.CriticalSeverityCount
					val.High = is.Issues.HighSeverityCount
					UpdateWizApplication(val.Id, val)
				}
			}
		}
	}
}

func getWizVulnerabilities(projectId string, subscriptionId string) models.WizVulnerability {

	graphqlRequest := `
query IssuesGroupedByEntityTable($resourceFilters: IssuesGroupedByEntityFilters, $issueFilters: IssueFilters, $issueOrderBy: IssueOrder, $first: Int, $after: String, $fetchIssues: Boolean!) {
          issuesGroupedByEntity(
            filterBy: $resourceFilters
            first: $first
            after: $after
            orderBy: {field: ISSUE_COUNT, direction: DESC}
          ) {
            nodes {
              id
              entityBasicDetails: entity {
                id
                type
                name
              }
              issues(first: 5, filterBy: $issueFilters, orderBy: $issueOrderBy) {
                nodes @include(if: $fetchIssues) {
                  ...IssueDetails
                }
                ...IssueCounts
                pageInfo {
                  hasNextPage
                }
              }
            }
            pageInfo {
              hasNextPage
              endCursor
            }
            totalCount
          }
        }
    
		fragment IssueDetails on Issue {
          id
          control {
            id
            name
          }
          description
          createdAt
          updatedAt
          status
          severity
          entity {
            id
            name
            type
          }
        }
    

		fragment IssueCounts on IssueConnection {
          totalCount
          criticalSeverityCount
          highSeverityCount
          mediumSeverityCount
          lowSeverityCount
          informationalSeverityCount
        }
    `
	variablesJson := fmt.Sprintf(`{
      "first": 20,
      "fetchIssues": true,
      "resourceFilters": {
        "project": [
          "%[1]s"
        ],
        "issueFilters": {
          "severity": [
            "CRITICAL",
            "HIGH"
          ],
          "status": [
            "OPEN",
            "IN_PROGRESS"
          ],
			"frameworkCategory": [
			  "35af5625-f4ad-4988-8d4b-1c1fd512e69c"
			],
          "relatedEntity": {
            "subscriptionId": [
              "%[2]s"
            ]
          }
        }
      },
      "issueFilters": {
        "severity": [
          "CRITICAL",
          "HIGH"
        ],
        "status": [
          "OPEN",
          "IN_PROGRESS"
        ],
        "frameworkCategory": [
          "35af5625-f4ad-4988-8d4b-1c1fd512e69c"
        ],
        "relatedEntity": {
          "subscriptionId": [
            "%[2]s"
          ]
        }
      },
      "issueOrderBy": {
        "field": "SEVERITY",
        "direction": "DESC"
      }
    }`, projectId, subscriptionId)

	wizVulnerabilities := CallGraphql[models.WizVulnerability](graphqlRequest, variablesJson)

	return wizVulnerabilities
}
